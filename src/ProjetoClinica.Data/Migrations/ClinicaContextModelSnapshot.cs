// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjetoClinica.Data.Context;

#nullable disable

namespace ProjetoClinica.Data.Migrations
{
    [DbContext(typeof(ClinicaContext))]
    partial class ClinicaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ProjetoClinica.Business.Models.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Bairro")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Cep")
                        .HasMaxLength(8)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Cidade")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Estado")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Logradouro")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Numero")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId")
                        .IsUnique();

                    b.ToTable("Endereco", (string)null);
                });

            modelBuilder.Entity("ProjetoClinica.Business.Models.Fisioterapeuta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("Apagado")
                        .HasMaxLength(1)
                        .HasColumnType("BIT")
                        .HasColumnName("Apagado");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Celular");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Cpf");

                    b.Property<ulong>("Disponivel")
                        .HasMaxLength(1)
                        .HasColumnType("BIT")
                        .HasColumnName("Disponivel");

                    b.Property<string>("Especialidade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Especialidade");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Nome");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Rg");

                    b.HasKey("Id");

                    b.ToTable("Fisioterapeuta", (string)null);
                });

            modelBuilder.Entity("ProjetoClinica.Business.Models.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("Apagado")
                        .HasMaxLength(1)
                        .HasColumnType("BIT")
                        .HasColumnName("Apagado");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Cpf");

                    b.Property<string>("Descricao")
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Descricao");

                    b.Property<string>("Diagnostico")
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Diagnostico");

                    b.Property<int>("FisioterapeutaId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Foto")
                        .HasColumnType("LONGBLOB")
                        .HasColumnName("Foto");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("CHAR")
                        .HasColumnName("Genero");

                    b.Property<int>("Idade")
                        .HasMaxLength(10)
                        .HasColumnType("INT")
                        .HasColumnName("Idade");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Nome");

                    b.Property<string>("ProfissaoAnterior")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("ProfissaoAnterior");

                    b.Property<string>("ProfissaoAtual")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("ProfissaoAtual");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Telefone");

                    b.Property<string>("TratamentosAnteriores")
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("TratamentosAnteriores");

                    b.HasKey("Id");

                    b.HasIndex("FisioterapeutaId");

                    b.ToTable("Paciente", (string)null);
                });

            modelBuilder.Entity("ProjetoClinica.Business.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("Apagado")
                        .HasMaxLength(1)
                        .HasColumnType("BIT")
                        .HasColumnName("Apagado");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Nome");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Senha");

                    b.HasKey("Id");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("ProjetoClinica.Business.Models.Endereco", b =>
                {
                    b.HasOne("ProjetoClinica.Business.Models.Paciente", "Paciente")
                        .WithOne("Endereco")
                        .HasForeignKey("ProjetoClinica.Business.Models.Endereco", "PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("ProjetoClinica.Business.Models.Paciente", b =>
                {
                    b.HasOne("ProjetoClinica.Business.Models.Fisioterapeuta", "Fisioterapeuta")
                        .WithMany("Pacientes")
                        .HasForeignKey("FisioterapeutaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fisioterapeuta");
                });

            modelBuilder.Entity("ProjetoClinica.Business.Models.Fisioterapeuta", b =>
                {
                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("ProjetoClinica.Business.Models.Paciente", b =>
                {
                    b.Navigation("Endereco")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
